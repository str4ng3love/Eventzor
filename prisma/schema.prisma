// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  name          String       @unique
  email         String?
  emailVerified DateTime?
  image         String?
  username      String
  password      String
  accounts      Account[]
  sessions      Session[]
  events        Event[]
  marketItems   MarketItem[]
  comments      Comment[]
  dislikes      Dislike[]
  likes         Like[]

  @@unique([username])
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Event {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String
  tickets       Int
  ticketsSold   Int       @default(0)
  eventDate     DateTime
  closingDate   DateTime
  location      String
  price         Float
  status        Status    @default(active)
  organizer     User      @relation(fields: [organizerName], references: [name])
  organizerName String
  images        String[]
  comments      Comment[]
  dislikes      Dislike[]
  likes         Like[]
}

model MarketItem {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  item         String
  description  String
  price        Float
  amount       Int
  amountSold   Int       @default(0)
  preorder     Boolean   @default(false)
  releaseDate  DateTime?
  isBuyOrder   Boolean   @default(false)
  imageUrl     String[]
  merchant     User      @relation(fields: [merchantName], references: [name])
  merchantName String
  images       String[]
  comments     Comment[]
  dislikes     Dislike[]
  likes        Like[]
}

enum Status {
  active
  inactive
  paused
  canceled
}

enum CommentStatus {
  normal
  flaggedAsDeleted
  reported
  brokeToS
}

model Comment {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime
  message      String
  status       CommentStatus @default(normal)
  updatedAt    DateTime?
  author       User          @relation(fields: [authorName], references: [name])
  authorName   String
  event        Event?        @relation(fields: [eventId], references: [id])
  eventId      String?       @db.ObjectId
  marketItem   MarketItem?   @relation(fields: [marketItemId], references: [id])
  marketItemId String?       @db.ObjectId
  parent       Comment?      @relation("parent-child", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentId     String?       @db.ObjectId
  children     Comment[]     @relation("parent-child")
  dislikes     Dislike[]
  likes        Like[]
}

model Dislike {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  userId       String      @db.ObjectId
  MarketItemId String?     @db.ObjectId
  commentId    String?     @db.ObjectId
  eventId      String?     @db.ObjectId
  event        Event?      @relation(fields: [eventId], references: [id])
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  marketItem   MarketItem? @relation(fields: [MarketItemId], references: [id])
  comment      Comment?    @relation(fields: [commentId], references: [id])
}

model Like {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  userId       String      @db.ObjectId
  MarketItemId String?     @db.ObjectId
  commentId    String?     @db.ObjectId
  eventId      String?     @db.ObjectId
  event        Event?      @relation(fields: [eventId], references: [id])
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  marketItem   MarketItem? @relation(fields: [MarketItemId], references: [id])
  comment      Comment?    @relation(fields: [commentId], references: [id])
}

model Currency {
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  exchangeRateToUSD Float
}
