// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  name             String         @unique
  email            String?
  emailVerified    DateTime?
  image            String?
  password         String
  accounts         Account[]
  sessions         Session[]
  events           Event[]
  marketItems      MarketItem[]
  comments         Comment[]
  dislikes         Dislike[]
  likes            Like[]
  orders           Order[]
  notifInitiators  Notification[] @relation(name: "initiatorsList")
  noticfRecipients Notification[] @relation(name: "recipientsList")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Event {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String
  tickets       Int
  ticketsSold   Int            @default(0)
  eventDate     DateTime
  closingDate   DateTime
  location      String
  price         Float
  status        StatusEvent    @default(open)
  organizer     User           @relation(fields: [organizerName], references: [name])
  organizerName String
  images        String[]
  comments      Comment[]
  dislikes      Dislike[]
  likes         Like[]
  notification  Notification[]
}

model MarketItem {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  item         String
  description  String
  price        Float
  amount       Int
  amountSold   Int            @default(0)
  preorder     Boolean        @default(false)
  releaseDate  DateTime?
  merchant     User           @relation(fields: [merchantName], references: [name])
  merchantName String
  itemType     ItemType
  images       String[]
  comments     Comment[]
  dislikes     Dislike[]
  likes        Like[]
  notification Notification[]
}

model Order {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  buyer           User           @relation(fields: [buyerName], references: [name])
  buyerName       String
  amounts         Json[]
  status          StatusOrder    @default(pendingPayment)
  currency        String
  shippingAddress String?
  phoneNumber     Int?
  orderedAt       DateTime       @default(now())
  notification    Notification[]
}

model Comment {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime
  message      String
  status       CommentStatus  @default(normal)
  updatedAt    DateTime?
  author       User           @relation(fields: [authorName], references: [name])
  authorName   String
  event        Event?         @relation(fields: [eventId], references: [id])
  eventId      String?        @db.ObjectId
  marketItem   MarketItem?    @relation(fields: [marketItemId], references: [id])
  marketItemId String?        @db.ObjectId
  parent       Comment?       @relation("parent-child", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentId     String?        @db.ObjectId
  children     Comment[]      @relation("parent-child")
  dislikes     Dislike[]
  likes        Like[]
  notification Notification[]
}

model Dislike {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  userName     String
  MarketItemId String?     @db.ObjectId
  commentId    String?     @db.ObjectId
  eventId      String?     @db.ObjectId
  event        Event?      @relation(fields: [eventId], references: [id])
  user         User        @relation(fields: [userName], references: [name])
  marketItem   MarketItem? @relation(fields: [MarketItemId], references: [id])
  comment      Comment?    @relation(fields: [commentId], references: [id])
}

model Like {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  userName     String
  MarketItemId String?     @db.ObjectId
  commentId    String?     @db.ObjectId
  eventId      String?     @db.ObjectId
  event        Event?      @relation(fields: [eventId], references: [id])
  user         User        @relation(fields: [userName], references: [name], onDelete: Cascade)
  marketItem   MarketItem? @relation(fields: [MarketItemId], references: [id])
  comment      Comment?    @relation(fields: [commentId], references: [id])
}

model Currency {
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  exchangeRateToUSD Float
}

model Notification {
  id              String             @id @default(auto()) @map("_id") @db.ObjectId
  initiator       String
  recipient       String
  item            MarketItem?        @relation(fields: [marketItemId], references: [id])
  order           Order?             @relation(fields: [orderId], references: [id])
  event           Event?             @relation(fields: [eventId], references: [id])
  userInit        User               @relation(name: "initiatorsList", fields: [initiator], references: [name])
  userRecip       User               @relation(name: "recipientsList", fields: [recipient], references: [name])
  comment         Comment?           @relation(fields: [commentId], references: [id])
  action          NotificationAction
  orderId         String?            @db.ObjectId
  marketItemId    String?            @db.ObjectId
  eventId         String?            @db.ObjectId
  commentId       String?            @db.ObjectId
  read            Boolean            @default(false)
  markedAsDeleted Boolean            @default(false)
}

enum NotificationAction {
  comment
  reply
  like
  dislike
  status
}

enum StatusEvent {
  open
  closed
  completed
  canceled
}

enum StatusOrder {
  canceled
  completed
  shipping
  pendingPayment
}

enum CommentStatus {
  normal
  flaggedAsDeleted
  reported
  brokeToS
}

enum ItemType {
  tshirt
  cap
  poster
  bracelet
  sticker
}
